#textdomain wesnoth-To_Lands_Unknown

#define IF_UNIT_INTERSECT FIRST SECOND ACTION_INTERSECTS ACTION_EMPTY
    [if]
        [have_unit]
            [and]
                {FIRST}
            [/and]
            [and]
                {SECOND}
            [/and]
        [/have_unit]
        [then]
            {ACTION_INTERSECTS}
        [/then]
        [else]
            {ACTION_EMPTY}
        [/else]
    [/if]
#enddef

#define TLU_SET_ACHIEVEMENT ID
    [set_achievement]
        content_for=to_lands_unknown
        id={ID}
    [/set_achievement]
#enddef

#define MEDITATION_EVENT ABILITY AMOUNT
    [event]
        name=side 1 turn end
        id={ABILITY}_event
        first_time_only=no
        [filter_condition]
            [have_unit]
                ability={ABILITY}
            [/have_unit]
        [/filter_condition]

        [store_unit]
            variable=meditation
            [filter]
                ability={ABILITY}
            [/filter]
        [/store_unit]
        #evaluate
        [if]
            {VARIABLE_CONDITIONAL meditation.moves equals $meditation.max_moves}
            [then]
                {VARIABLE_OP meditation.experience add {AMOUNT}}
                {IF_VAR meditation.experience greater_than_equal_to $meditation.max_experience (
                    [then]
                        {TLU_SET_ACHIEVEMENT tlu_experience_investment}
                    [/then]
                )}
                [unstore_unit]
                    variable=meditation
                    text="+{AMOUNT}" + _" exp"
                    red,green,blue=50,50,200
                [/unstore_unit]
            [/then]
        [/if]
        {CLEAR_VARIABLE meditation}
    [/event]
    #early finish bonus xp
    [event]
        name=victory,bonus
        first_time_only=no
        priority=100
        [if]
            [have_unit]
                ability={ABILITY}
            [/have_unit]
            [then]
                {IF_VAR lock_bonusxp equals true (
                    [then]
                    [/then]
                    [else]
                        [store_turns]
                        [/store_turns]
                        {IF_VAR turns equals -1 (
                            [then]
                            [/then]
                            [else]
                                {VARIABLE bonusxp $turns}
                                {VARIABLE_OP bonusxp sub $turn_number}
                                {VARIABLE_OP bonusxp multiply {AMOUNT}}
                                [store_unit]
                                    variable=meditation
                                    [filter]
                                        ability={ABILITY}
                                    [/filter]
                                [/store_unit]
                                {VARIABLE_OP meditation.experience add $bonusxp}
                                [unstore_unit]
                                    variable=meditation
                                    text="+$bonusxp" + _" exp"
                                    red,green,blue=50,50,200
                                [/unstore_unit]
                                ## {DEBUG "$bonusxp"}
                                {CLEAR_VARIABLE bonusxp}
                                {CLEAR_VARIABLE turns}
                            [/else]
                        )}
                    [/else]
                )}
            [/then]
        [/if]
    [/event]
    #explain early finish bonus xp mechanics to player
    [event]
        name=post advance
        [filter]
            id=Mehir
            ability=meditation
        [/filter]
        {IF_VAR meditation_msg equals 1 (
            [then]
            [/then]
            [else]
                [message]
                    speaker=narrator
                    image=portraits/narrator.webp
                    message= _ "You have unlocked early finish bonus XP - from now on Mehir will get additional XP every time you finish a scenario before turns run out (+1 XP for each remaining turn)."
                [/message]
                {VARIABLE meditation_msg 1}
            [/else]
        )}
    [/event]
#enddef

#define EVENTS_MEHIR_GOLD_AMLA
    [event]
        name=last_breath
        first_time_only=no
        [filter]
            level=1-999
            [not]
                race=eoma_magical,undead
            [/not]
            [filter_adjacent]
                ability=tlu_resourceful
            [/filter_adjacent]
        [/filter]
        [store_side]
            [has_unit]
                ability=tlu_resourceful
                [filter_adjacent]
                    x,y=$x1,$y1
                [/filter_adjacent]
            [/has_unit]
            variable = mehir_side
        [/store_side]

        {VARIABLE gold 1}

        [gold]
            side=$mehir_side.side
            amount=$gold
        [/gold]

        [unstore_unit]
            variable=unit
            red,green,blue=246,190,0
            text= "+$gold " + _ "gold"
            find_vacant=no
        [/unstore_unit]

        {CLEAR_VARIABLE mehir_side}
        {CLEAR_VARIABLE gold}
    [/event]

    [event]
        name=last_breath
        first_time_only=no
        [filter]
            level=1-999
            [not]
                race=eoma_magical,undead
            [/not]
            [filter_adjacent]
                is_enemy=yes
                ability=tlu_resourceful2
            [/filter_adjacent]
        [/filter]
        [store_side]
            [has_unit]
                ability=tlu_resourceful2
                [filter_adjacent]
                    is_enemy=yes
                    x,y=$x1,$y1
                [/filter_adjacent]
            [/has_unit]
            variable = mehir_side
        [/store_side]

        # Lv1-2: 1 gold, Lv2-3: 2 gold, Lv4-5: 3 gold...
        {VARIABLE gold "$(round($unit.level * 2.0 / 3))"}

        [gold]
            side=$mehir_side.side
            amount=$gold
        [/gold]

        [unstore_unit]
            variable=unit
            red,green,blue=246,190,0
            text= "+$gold " + _ "gold"
            find_vacant=no
        [/unstore_unit]

        {IF_VAR gold greater_than 2 (
            [then]
                [sound]
                    name=open-chest.ogg
                [/sound]
            [/then]
        )}

        {CLEAR_VARIABLE mehir_side}
        {CLEAR_VARIABLE gold}
    [/event]
#enddef

#define AMLA_XP_PENALTY_TEMP INDEX AMOUNT
    [case]
        value={INDEX}
        [object]
            id=mehir_amla_penalty_{INDEX}
            [filter]
                id=$unit.id
            [/filter]
            [effect]
                apply_to=max_experience
                increase={AMOUNT}
            [/effect]
        [/object]
    [/case]
#enddef

#define AMLA_HP_PENALTY_TEMP INDEX AMOUNT
    [case]
        value={INDEX}
        [object]
            id=mehir_amla_penalty_{INDEX}
            [filter]
                id=$unit.id
            [/filter]
            [effect]
                apply_to=hitpoints
                increase_total=-{AMOUNT}
            [/effect]
        [/object]
    [/case]
#enddef

#define EVENTS_MEHIR_AMLA
    [event]
        name=post summon
        first_time_only=no
        [filter_second]
            ability=tlu_veteran_summons
        [/filter_second]

        [store_unit]
            [filter]
                x,y=$x1,$y1
            [/filter]
            variable=summoned
        [/store_unit]

        {VARIABLE_OP summoned.experience add 8}

        [unstore_unit]
            variable=summoned
            find_vacant=no
            text= _ "+8 exp"
            red,green,blue=50,50,200
        [/unstore_unit]

        {CLEAR_VARIABLE summoned}
    [/event]

    {MEDITATION_EVENT meditation 1}
    {MEDITATION_EVENT jinn_philosophy 3}
    {EVENTS_MEHIR_GOLD_AMLA}
#enddef

#define AMLA_FAST_SUMMON
    [advancement]
        strict_amla=yes
        max_times=1
        id=AMLA_FAST_SUMMON
        description= _ "Summoning a unit only costs 1 MP, but you may not attack, +15% XP."
        image="attacks/circle-basic.png"
        [filter]
            [not]
                type=TLU_Mehir_Guard,TLU_Mehir_Commander,TLU_Mehir_Leader,TLU_The_Last_Summoner,EoMa_Banisher,EoMa_Grand_Summoner_lock
            [/not]
        [/filter]
        [effect]
            apply_to=new_ability
            [abilities]
                [dummy]
                    id=eoma_fastsummon
                    name= _ "fast summon"
                    description=_"This unit may move after summoning (but not attack)."
                [/dummy]
            [/abilities]
        [/effect]
        [effect]
            apply_to=hitpoints
            heal_full=yes
        [/effect]
        [effect]
            apply_to=status
            remove=poisoned
        [/effect]
        [effect]
            apply_to=status
            remove=slowed
        [/effect]
    [/advancement]
#enddef

#define EXTRA_UNIT_AMLAS
    [event]
        name=pre advance
        first_time_only=no
        [filter]
            type=EoMa_Heavy_Summoner,EoMa_Neutral_Summoner,EoMa_Summons_Master
            [not]
                ability=eoma_fastsummon
            [/not]
        [/filter]
        [object]
            id=upgradable_fast_summon
            take_only_once=no
            duration=scenario
            silent=yes
            [filter]
                id=$unit.id
            [/filter]
            [effect]
                apply_to=new_advancement
                {AMLA_FAST_SUMMON}
            [/effect]
        [/object]
    [/event]
#enddef

#define DIMENSIONAL_GATES_HANDLER
    #player banishes an elemental
    [event]
        name=post banish

        [filter]
            side=1
        [/filter]

        {IF_VAR player_banished_creature not_equals yes (
            [then]
                [if]
                    [have_unit]
                        type=TLU_Mehir_Leader,TLU_The_Last_Summoner
                    [/have_unit]
                    [else]
                        [message]
                            speaker=narrator
                            image=portraits/narrator.webp
                            message= _ "You have managed to acquire a 'Dimensional Gate'. These special units can be transformed into real magical beings by consuming souls of living creatures. You will learn more about the usage of Dimensional Gates later in the story.

NOTE: When used right, a Dimensional Gate may be used to summon units you may not recruit, such as powerful yet expensive Jinni. You may also choose to stack these gates for later use."
                        [/message]
                        {VARIABLE player_banished_creature yes}
                    [/else]
                [/if]
            [/then]
        )}
    [/event]
    #collector achievement
    [event]
        name=post banish
        first_time_only=no

        [filter]
            side=1
        [/filter]

        [if]
            [have_unit]
                type=EoMa_Dimensional_Gate,EoMa_Dimensional_Gate_II
                search_recall_list=yes
                count=30
            [/have_unit]
            [then]
                {TLU_SET_ACHIEVEMENT tlu_collector}
            [/then]
        [/if]
    [/event]
    #player advances a dimensional gate
    [event]
        name=post gate

        [filter]
            side=1
        [/filter]

        {VARIABLE player_advanced_dg yes}
    [/event]
#enddef

#define MASTER_BANISHER_WARNING
    [event]
        id=masterbanisher_warning
        name=unit placed,post advance
        first_time_only=no
        [filter]
            type=EoMa_Master_Banisher
        [/filter]
        [message]
            speaker=narrator
            image=portraits/narrator.webp
            message= _ "WARNING: Master Banisher breaks certain TLU events at the moment, and is not available in TLU for the time being. DO NOT BANISH lvl3 enemies with this unit, especially named ones!

The author is not responsible for any bugs caused by spawning this unit via debug or other means."
        [/message]
    [/event]
#enddef

###########################################################
#Ally Swapping Code - author: ForestDragon; add-on: Spartan
###########################################################

#define TLU_SWAP FILTER_A FILTER_B
    [animate_unit]
        flag=standing
        [filter]
            {FILTER_A}
        [/filter]
        [facing]
            [filter]
                {FILTER_B}
            [/filter]
        [/facing]
    [/animate_unit]
    [store_unit]
        [filter]
            {FILTER_A}
        [/filter]
        variable=swap_a
        kill=no
    [/store_unit]
    [store_unit]
        [filter]
            {FILTER_B}
        [/filter]
        variable=swap_b
        kill=no
    [/store_unit]
    [object]
        silent=yes
        duration=turn end
        [filter]
            {FILTER_A}
        [/filter]
        [effect]
            apply_to=new_animation
            [extra_anim]
                flag=tmp_swap$swap_b.id#adding id to the anim flag, to avoid conflicts between units, just in case
                swap2_start_time=0
                [swap2_frame]
                    duration=500
                    image=$swap_b.image
                    image_mod="~TC($swap_b.side|,magenta)~FL(horiz)"
                    offset=1.0~0.0
                    #      layer=1
                    auto_vflip=false
                [/swap2_frame]
                [frame]
                    duration=500
                    offset=0.0~1.0
                    sound={SOUND_LIST:MISS}
                [/frame]
            [/extra_anim]
        [/effect]
    [/object]

    [hide_unit]
        {FILTER_B}
    [/hide_unit]

    [animate_unit]
        flag=tmp_swap$swap_b.id
        [filter]
            {FILTER_A}
        [/filter]
    [/animate_unit]
    [lock_view]
    [/lock_view]
    {VARIABLE swap_a2_x $swap_a.x}
    {VARIABLE swap_a2_y $swap_a.y}
    {VARIABLE swap_a.x $swap_b.x}
    {VARIABLE swap_a.y $swap_b.y}
    {VARIABLE swap_b.x $swap_a2_x}
    {VARIABLE swap_b.y $swap_a2_y}

    {VARIABLE swap_a.moves 0}
    {VARIABLE swap_b.moves 0}

    [unlock_view]
    [/unlock_view]
    [unstore_unit]
        variable=swap_a
        find_vacant=no
    [/unstore_unit]
    [unstore_unit]
        variable=swap_b
        find_vacant=no
    [/unstore_unit]
    [unhide_unit]
        id=$swap_b.id
    [/unhide_unit]
    [sound]
        name={SOUND_LIST:MISS}
    [/sound]
    {CLEAR_VARIABLE swap_a}
    {CLEAR_VARIABLE swap_b}
    {CLEAR_VARIABLE swap_a2_x}
    {CLEAR_VARIABLE swap_a2_y}
    [redraw]
        clear_shroud=yes
    [/redraw]
#enddef

#define TLU_CHECK_MOVECOST UNIT_ID X Y
    [store_locations]
        x,y={X},{Y}
        include_borders=yes#necessary for knockback code to work properly
        variable=tmp_tlu_movecost_loc
    [/store_locations]

    #important note: when a unit is slowed, the movecost is doubled, so this code is mostly good for just checking if a tile is completely impossible
    #if this macro is used for precise movecost calculation, make sure to check for slow otherwise it will be inconsistent

    [lua]
        code=<<

    local args = ...

local u = wesnoth.units.get(args.unit_id)
local t = wml.variables["tmp_tlu_movecost_loc[0].terrain"]
if t then
    local move_cost = wesnoth.units.movement_on(u, t)
    wml.variables["tmp_return_movecost"] = move_cost
    if(move_cost>19) then
        wml.variables["tmp_return_passable"] = "no"
    else
        wml.variables["tmp_return_passable"] = "yes"
    end
end

    >>
        [args]
            unit_id={UNIT_ID}
        [/args]
    [/lua]
    #[chat]
    #    message=$tmp_return_movecost
    #[/chat]
    {CLEAR_VARIABLE tmp_tlu_movecost_loc}
    {CLEAR_VARIABLE test_movecost}
#enddef

#define TLU_SWAP_ALLY
    [event]
        name=moveto,attack end
        id=tlu_swap_select_event2
        first_time_only=no

        {CLEAR_VARIABLE last_selected_unit2}
        [allow_undo]
        [/allow_undo]
    [/event]

    [event]
        name=select,recruit,recall
        id=tlu_swap_select_event
        first_time_only=no
        [filter]
            side=1
            formula= "moves >= 1"
        [/filter]

        [store_unit]
            [filter]
                x,y=$x1,$y1
            [/filter]
            variable=last_selected_unit2
        [/store_unit]
        [allow_undo]
        [/allow_undo]
    [/event]
    [event]
        name=start
        [set_menu_item]
            id=tlu_swapally
            description= _ "Swap places with this ally."
            [show_if]
                [have_unit]
                    x,y=$x1,$y1
                    ## formula= "moves >= max_moves"
                    [filter_adjacent]
                        side=1
                        is_enemy=no
                        find_in=last_selected_unit2
                    [/filter_adjacent]
                    [not]
                        side=1
                    [/not]
                [/have_unit]
            [/show_if]
            [command]
                [store_unit]
                    [filter]
                        x,y=$x1,$y1
                    [/filter]
                    variable=tmp_tlu_swapped_unit
                    kill=no
                [/store_unit]
                [store_unit]
                    [filter]
                        x,y=$last_selected_unit2.x,$last_selected_unit2.y
                    [/filter]
                    variable=tmp_tlu_swapping_unit
                    kill=no
                [/store_unit]

                #sets tmp_return_movecost and tmp_return_passable variables, the latter of which is used for the code:
                {TLU_CHECK_MOVECOST $tmp_tlu_swapping_unit.id $x1 $y1}

                {IF_VAR tmp_return_passable equals no (
                    [then]
                        [print]
                            text= _ "Can't move onto this terrain!"
                            size=20
                            red=255
                            duration=2000
                        [/print]
                    [/then]
                    [else]
                        #make sure the other player can move to player position too
                        {TLU_CHECK_MOVECOST $tmp_tlu_swapped_unit.id $tmp_tlu_swapping_unit.x $tmp_tlu_swapping_unit.y}
                        {IF_VAR tmp_return_passable equals no (
                            [then]
                                [print]
                                    text= _ "Ally can't move onto your tile's terrain!"
                                    size=20
                                    red=255
                                    duration=2000
                                [/print]
                            [/then]
                            [else]
                                {TLU_SWAP (
                                    x,y=$last_selected_unit2.x,$last_selected_unit2.y
                                ) (
                                    x,y=$x1,$y1
                                )}
                                [fire_event]
                                    name=moveto
                                    [primary_unit]
                                        x,y=$x1,$y1
                                    [/primary_unit]
                                [/fire_event]
                            [/else]
                        )}
                    [/else]
                )}

                {CLEAR_VARIABLE tmp_tlu_swapped_unit}
                {CLEAR_VARIABLE tmp_tlu_swapping_unit}
                {CLEAR_VARIABLE tmp_return_movecost}
                {CLEAR_VARIABLE tmp_return_passable}
                {CLEAR_VARIABLE last_selected_unit2}
            [/command]
        [/set_menu_item]

        [set_menu_item]
            id=z_swapping_help
            description= _ "Swapping Units Help"

            [command]
                [message]
                    speaker=narrator
                    image=portraits/narrator.webp
                    message= _ "Your units can swap places with ai-controlled allied units if you order them to. This is especially useful if a friendly unit blocks an important tile.

To swap places with an allied unit, select your own unit first, then right-click the adjacent allied unit and choose the option to swap places with that unit.

Your unit must have at least 1 movepoint left to be able to swap places with other units. Swapping uses all moves of your unit. You can perform swapping only against ai-controlled friendly units.

(You can view this help message again by right-clicking anywhere on the map)"
                [/message]
            [/command]
        [/set_menu_item]
    [/event]
#enddef

#define CAMPAIGN_EVENTS
    {EVENTS_MEHIR_AMLA}
    {EXTRA_UNIT_AMLAS}
    {DIMENSIONAL_GATES_HANDLER}
    {MASTER_BANISHER_WARNING}
    {TLU_SWAP_ALLY}
#enddef
